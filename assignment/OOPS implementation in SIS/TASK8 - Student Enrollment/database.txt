        //----------------------------------------------------------------------[TASK-8]
        //Enroling a student with the given details
        public static void EnrollStudentFromInput()
        {
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();
                SqlTransaction transaction = connection.BeginTransaction();

                try
                {
                    // 1. Get student details
                    Console.WriteLine("Enter First Name:");
                    string firstName = Console.ReadLine();

                    Console.WriteLine("Enter Last Name:");
                    string lastName = Console.ReadLine();

                    Console.WriteLine("Enter Date of Birth (yyyy-mm-dd):");
                    DateTime dob = DateTime.Parse(Console.ReadLine());

                    Console.WriteLine("Enter Email:");
                    string email = Console.ReadLine();

                    Console.WriteLine("Enter Phone Number:");
                    string phone = Console.ReadLine();

                    int studentId;

                    // 2. Check if student exists
                    string checkStudentQuery = "SELECT student_id FROM Students WHERE first_name = @FirstName AND last_name = @LastName AND email = @Email";
                    using (SqlCommand checkCmd = new SqlCommand(checkStudentQuery, connection, transaction))
                    {
                        checkCmd.Parameters.AddWithValue("@FirstName", firstName);
                        checkCmd.Parameters.AddWithValue("@LastName", lastName);
                        checkCmd.Parameters.AddWithValue("@Email", email);

                        object result = checkCmd.ExecuteScalar();

                        if (result != null)
                        {
                            studentId = Convert.ToInt32(result);
                            Console.WriteLine("Student already exists. Proceeding with existing student ID.");
                        }
                        else
                        {
                            string getMaxId = "SELECT ISNULL(MAX(student_id), 0) FROM Students";
                            using (SqlCommand maxCmd = new SqlCommand(getMaxId, connection, transaction))
                                studentId = (int)maxCmd.ExecuteScalar() + 1;

                            string insertStudent = @"INSERT INTO Students (student_id, first_name, last_name, date_of_birth, email, phone_number)
                                             VALUES (@ID, @FirstName, @LastName, @DOB, @Email, @Phone)";
                            using (SqlCommand insertCmd = new SqlCommand(insertStudent, connection, transaction))
                            {
                                insertCmd.Parameters.AddWithValue("@ID", studentId);
                                insertCmd.Parameters.AddWithValue("@FirstName", firstName);
                                insertCmd.Parameters.AddWithValue("@LastName", lastName);
                                insertCmd.Parameters.AddWithValue("@DOB", dob);
                                insertCmd.Parameters.AddWithValue("@Email", email);
                                insertCmd.Parameters.AddWithValue("@Phone", phone);
                                insertCmd.ExecuteNonQuery();
                                Console.WriteLine("New student inserted successfully.");
                            }
                        }
                    }

                    // 3. Get course count
                    Console.WriteLine("How many courses to enroll?");
                    int courseCount = int.Parse(Console.ReadLine());

                    List<int> courseIds = new List<int>();
                    for (int i = 0; i < courseCount; i++)
                    {
                        Console.WriteLine($"Enter Course Name {i + 1}:");
                        string courseName = Console.ReadLine();

                        // Check if course exists
                        string checkCourseQuery = "SELECT course_id FROM Courses WHERE course_name = @CourseName";
                        using (SqlCommand checkCourseCmd = new SqlCommand(checkCourseQuery, connection, transaction))
                        {
                            checkCourseCmd.Parameters.AddWithValue("@CourseName", courseName);
                            object result = checkCourseCmd.ExecuteScalar();

                            if (result != null)
                            {
                                courseIds.Add(Convert.ToInt32(result));
                                Console.WriteLine("Course already exists. Using existing course ID.");
                            }
                            else
                            {
                                // Insert new course
                                string getMaxCourseId = "SELECT ISNULL(MAX(course_id), 0) FROM Courses";
                                int newCourseId;
                                using (SqlCommand maxCmd = new SqlCommand(getMaxCourseId, connection, transaction))
                                    newCourseId = (int)maxCmd.ExecuteScalar() + 1;

                                string insertCourse = "INSERT INTO Courses (course_id, course_name, credits, teacher_id) VALUES (@ID, @Name, @Credits, NULL)";
                                using (SqlCommand insertCmd = new SqlCommand(insertCourse, connection, transaction))
                                {
                                    insertCmd.Parameters.AddWithValue("@ID", newCourseId);
                                    insertCmd.Parameters.AddWithValue("@Name", courseName);
                                    insertCmd.Parameters.AddWithValue("@Credits", 3); // default
                                    insertCmd.ExecuteNonQuery();
                                }

                                courseIds.Add(newCourseId);
                                Console.WriteLine("New course inserted successfully.");
                            }
                        }
                    }

                    // 4. Enroll student into each course
                    foreach (int courseId in courseIds)
                    {
                        string getMaxEnrollId = "SELECT ISNULL(MAX(enrollment_id), 0) FROM Enrollments";
                        int newEnrollId;
                        using (SqlCommand maxCmd = new SqlCommand(getMaxEnrollId, connection, transaction))
                            newEnrollId = (int)maxCmd.ExecuteScalar() + 1;

                        string enrollQuery = "INSERT INTO Enrollments (enrollment_id, student_id, course_id, enrollment_date) VALUES (@EnrollID, @StudentID, @CourseID, @Date)";
                        using (SqlCommand enrollCmd = new SqlCommand(enrollQuery, connection, transaction))
                        {
                            enrollCmd.Parameters.AddWithValue("@EnrollID", newEnrollId);
                            enrollCmd.Parameters.AddWithValue("@StudentID", studentId);
                            enrollCmd.Parameters.AddWithValue("@CourseID", courseId);
                            enrollCmd.Parameters.AddWithValue("@Date", DateTime.Now);
                            enrollCmd.ExecuteNonQuery();
                        }
                    }

                    transaction.Commit();
                    Console.WriteLine($"\n{firstName} {lastName} enrolled successfully in {courseCount} course(s).");
                }
                catch (Exception ex)
                {
                    transaction.Rollback();
                    Console.WriteLine("Error: " + ex.Message);
                }
            }
        }